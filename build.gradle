plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.60"
    id "com.github.ben-manes.versions" version "0.24.0"
    id "com.jfrog.bintray" version "1.8.4"
    id "jacoco"
    id "maven-publish"
}

allprojects {
    version "$version"
    group 'com.apurebase'

    apply plugin: 'kotlin'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: "com.jfrog.bintray"

    repositories {
        jcenter()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
        compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
        compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"


        testCompile "io.netty:netty-all:$netty_version"
        testCompile "junit:junit:$junit_version"
        testCompile "org.hamcrest:hamcrest:$hamcrest_version"
        testCompile "org.amshove.kluent:kluent:$kluent_version"
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publish = true
        publications = ['MyPublication']
        configurations = ['archives']
        pkg {
            repo = 'apurebase'
            name = project.name
            licenses = ['MIT']
            vcsUrl = 'https://github.com/aPureBase/KGraphQL'
            websiteUrl = 'https://kgraphql.in'
            issueTrackerUrl = 'https://github.com/aPureBase/KGraphQL/issues'
            version {
                name = project.version
                released = new Date()
            }
        }

        publishing {
            publications {
                MyPublication(MavenPublication) {
                    from components.java
                    groupId project.group
                    artifactId project.name
                    artifact sourcesJar
                    version version
                }
            }
        }
    }
}


subprojects {
    check.dependsOn jacocoTestReport
    check.dependsOn jacocoTestCoverageVerification
    tasks.test.finalizedBy jacocoTestReport

    jacoco {
        toolVersion = "0.8.4"
        reportsDir = file("$buildDir/reports")
    }

    jacocoTestReport {
        group = "Reporting"
        description = "Generate Jacoco coverage reports"

        reports {
            html.enabled = true
            csv.enabled = true
        }

        // what to exclude from coverage report
        // UI, "noise", generated classes, platform classes, etc.
        def excludes = [
                '**/Manifest*.*',
                '**/*Test*.*'
        ]
        // generated classes
        afterEvaluate {
            classDirectories.from = project.files(classDirectories.files.collect {
                fileTree(dir: it, excludes: excludes)
            })
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.5
                }
            }

            rule {
                enabled = false
                element = 'CLASS'
                includes = ['org.gradle.*']

                limit {
                    counter = 'LINE'
                    value = 'TOTALCOUNT'
                    maximum = 0.3
                }
            }
        }
    }
}

task jacocoRootReport(type: JacocoReport, group: 'reporting') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn subprojects.test

    additionalSourceDirs.from = files subprojects.sourceSets.main.allSource.srcDirs
    sourceDirectories.from = files subprojects.sourceSets.main.allSource.srcDirs
    classDirectories.from = files subprojects.sourceSets.main.output
    executionData.from = files subprojects.jacocoTestReport.executionData

    reports {
        html.enabled = true
        csv.enabled = true
    }

    doFirst {
        executionData.from = files(executionData.findAll { it.exists() })
    }
}

tasks.test.finalizedBy jacocoRootReport
